// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                  String               @id @default(cuid())
    name                String?
    email               String?              @unique
    emailVerified       DateTime?
    image               String?
    shifts              Shift[]
    accounts            Account[]
    sessions            Session[]
    absences            Absence[]
    employees           Employee[]
    vacations           Vacation[]
    staffRoles          StaffRole[]
    sickLeaves          SickLeave[]
    shiftModels         ShiftModel[]
    workDayNotes        WorkDayNote[]
    employeeNotes       EmployeeNote[]
    schedulePreferences SchedulePreference[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Employee {
    id                 String              @id @default(cuid())
    name               String
    email              String
    address            String
    userId             String
    phoneNumber        String
    shifts             Shift[]
    vacations          Vacation[]
    roles              StaffRole[]
    sickLeaves         SickLeave[]
    notes              EmployeeNote[]
    schedulePreference SchedulePreference?
    vacationDays       Int                 @default(25)
    user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model EmployeeNote {
    id         String   @id @default(cuid())
    userId     String
    content    String
    employeeId String
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([employeeId])
}

model SchedulePreference {
    id            String       @id @default(cuid())
    employeeId    String       @unique
    userId        String
    hoursPerMonth Int
    createdAt     DateTime     @default(now())
    shiftModels   ShiftModel[]
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee      Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([employeeId])
}

model SickLeave {
    id         String   @id @default(cuid())
    start      BigInt
    end        BigInt
    userId     String
    employeeId String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([employeeId])
}

model Vacation {
    id         String   @id @default(cuid())
    start      BigInt
    end        BigInt
    userId     String
    employeeId String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([employeeId])
}

model WorkDay {
    id    String        @id @default(cuid())
    date  Int           @unique
    notes WorkDayNote[]
}

model WorkDayNote {
    id        String   @id @default(cuid())
    userId    String
    content   String
    workDayId String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    workDay   WorkDay  @relation(fields: [workDayId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([workDayId])
}

model Shift {
    id         String     @id @default(cuid())
    start      Int
    end        Int
    employeeId String
    userId     String
    date       Int
    roleId     String?
    absenceId  String?
    absence    Absence?
    role       StaffRole? @relation(fields: [roleId], references: [id], onDelete: SetNull)
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@unique([employeeId, date])
    @@index([userId])
    @@index([roleId])
    @@index([employeeId])
}

model Absence {
    id      String  @id @default(cuid())
    userId  String
    reason  String
    absent  Boolean @default(true)
    shiftId String  @unique
    shift   Shift   @relation(fields: [shiftId], references: [id])
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model StaffRole {
    id           String     @id @default(cuid())
    numberPerDay Int?
    name         String
    userId       String
    shifts       Shift[]
    color        String?
    employees    Employee[]
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model ShiftModel {
    id                  String               @id @default(cuid())
    start               Int
    end                 Int
    userId              String
    user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    schedulePreferences SchedulePreference[]

    @@index([userId])
}
