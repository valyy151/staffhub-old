// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id              String            @id @default(cuid())
    name            String?
    email           String?           @unique
    emailVerified   DateTime?
    image           String?
    shifts          Shift[]
    accounts        Account[]
    sessions        Session[]
    workDays        WorkDay[]
    employees       Employee[]
    vacations       Vacation[]
    sickLeaves      SickLeave[]
    workDayNotes    WorkDayNote[]
    employeeNotes   EmployeeNote[]
    ShiftPreference ShiftPreference[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Employee {
    id               String            @id @default(cuid())
    name             String
    email            String
    address          String
    userId           String
    phoneNumber      String
    shifts           Shift[]
    vacations        Vacation[]
    sickLeaves       SickLeave[]
    notes            EmployeeNote[]
    shiftPreferences ShiftPreference[]
    vacationDays     Int               @default(25)
    user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model EmployeeNote {
    id         String   @id @default(cuid())
    userId     String
    content    String
    employeeId String
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([employeeId])
}

model ShiftPreference {
    id         String   @id @default(cuid())
    employeeId String
    content    String
    userId     String
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([employeeId])
}

model SickLeave {
    id         String   @id @default(cuid())
    start      BigInt
    end        BigInt
    userId     String
    employeeId String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([employeeId])
}

model Vacation {
    id         String   @id @default(cuid())
    start      BigInt
    end        BigInt
    userId     String
    employeeId String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([employeeId])
}

model WorkDay {
    id     String        @id @default(cuid())
    date   Int           @unique
    userId String
    notes  WorkDayNote[]
    user   User          @relation(fields: [userId], references: [id])

    @@index([userId])
}

model WorkDayNote {
    id        String   @id @default(cuid())
    userId    String
    content   String
    workDayId String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    workDay   WorkDay  @relation(fields: [workDayId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([workDayId])
}

model Shift {
    id         String   @id @default(cuid())
    start      Int
    end        Int
    employeeId String
    userId     String
    date       Int
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@unique([userId, date])
    @@index([userId])
    @@index([employeeId])
}
